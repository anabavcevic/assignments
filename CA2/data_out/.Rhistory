if (!require("swirl")) install.packages("swirl")
library(swirl)
install_course_github('darrenredmond', 'R_ProgrammingDR')
swirl()
1
swirl()
5+7
x<-5+7
X
x
y<- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <-z / my_sqrt
my_div
c(1,2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
getwd()
ls()
x<- 9
ls()
dir()
?list.files
args(list.files)
old.dir <-getwd()
dir.create('testdir')
setwd('testdir')
file.create("mytest.R")
list.files()
file.exists('mytest.R')
file.into('mytest.R')
file.into("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" , "mytest2.R")
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('filder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3), recursive = TRUE)
'
)
)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggthemes")) install.packages("ggthemes")
if (!require("scales")) install.packages("scales")
if (!require("dplyr")) install.packages("dplyr")
if (!require("mice")) install.packages("mice")
if (!require("randomForest")) install.packages("randomForest")
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
setwd("C:/Documents")
train <- read.csv('train.csv', stringsAsFactors = F)
test  <- read.csv('test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data
# check da
setwd("C:/Documents")
train <- read.csv('train.csv', stringsAsFactors = F)
test  <- read.csv('test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data
# check data
str(full)
setwd("C:/users/Ana/Documents")
train <- read.csv('train.csv', stringsAsFactors = F)
test  <- read.csv('test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data
# check data
str(full)
setwd("C:/users/Ana/Documents")
train <- read.csv('train.csv', stringsAsFactors = F)
test  <- read.csv('test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data
# check data
str(full)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
# Grab title from passenger names
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
# Use ggplot2 to visualize the relationship between family size & survival
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
# Create a family size variable including the passenger themselves
full$Fsize <- full$SibSp + full$Parch + 1
# Use ggplot2 to visualize the relationship between family size & survival
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# This variable appears to have a lot of missing values
full$Cabin[1:28]
# The first character is the deck. For example:
strsplit(full$Cabin[2], NULL)[[1]]
# The first character is the deck. For example:
strsplit(full$Cabin[2], NULL)[[1]]
## [1] "C" "8" "5"
# Create a Deck variable. Get passenger deck A - F:
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
#Passengers 62 and 830 are missing Embarkment
full[c(62, 830), 'Embarked']
## [1] "" ""
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
# Use ggplot2 to visualize embarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# Get rid of our missing passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# Use ggplot2 to visualize embarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# Since their fare was $80 for 1st class, they most likely embarked from 'C'
full$Embarked[c(62, 830)] <- 'C'
# Show row 1044
full[1044, ]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
# Since their fare was $80 for 1st class, they most likely embarked from 'C'
full$Embarked[c(62, 830)] <- 'C'
# Show row 1044
full[1044, ]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
# Replace missing fare value with median fare for class/embarkment
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
# Show number of missing Age values
sum(is.na(full$Age))
## [1] 263
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')
# Save the complete output
mice_output <- complete(mice_mod)
# Plot age distributions
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
# Plot age distributions
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
# Replace Age variable from the mice model.
full$Age <- mice_output$Age
# Show new number of missing Age values
sum(is.na(full$Age))
## [1] 0
# Replace Age variable from the mice model.
full$Age <- mice_output$Age
# Show new number of missing Age values
sum(is.na(full$Age))
## [1] 0
# First we'll look at the relationship between age & survival
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# I include Sex since we know (a priori) it's a significant predictor
facet_grid(.~Sex) +
theme_few()
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Adding Mother variable
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
# Show counts
table(full$Mother, full$Survived)
##
##                0   1
##   Mother      16  39
##   Not Mother 533 303
# Finish by factorizing our two new factor variables
full$Child  <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
# Split the data back into a train set and a test set
train <- full[1:891,]
test <- full[892:1309,]
# Set a random seed
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
# Show model error
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
ggplot(ca2_analiza, aes(x='name', y='revision')) + geom_bar(stat="Identity") +
labs(x="name", y="revision")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggthemes")) install.packages("ggthemes")
if (!require("scales")) install.packages("scales")
if (!require("dplyr")) install.packages("dplyr")
if (!require("mice")) install.packages("mice")
if (!require("randomForest")) install.packages("randomForest")
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("doBy")
getwd()
setwd("C:/Users/Ana/Documents/GitHub/assignments/CA2/data_out")
ca2_analiza <- read.csv('dataset_output.csv')
average_number_of_changes = mean(ca2_analiza$changes)
average_number_of_comment = mean(ca2_analiza$comment_lines)
commits_per_developer <- ca2_analiza %>% group_by(name) %>% tally()
average_number_of_changes
average_number_of_comment
name<-(ca2_analiza$name)
revision<-(ca2_analiza$revision)
ggplot(ca2_analiza, aes(x='name', y='revision')) + geom_bar(stat="Identity") +
labs(x="name", y="revision")
getwd()
setwd("C:/Users/Ana/Documents/GitHub/assignments/CA2/data_out")
ca2_analiza <- read.csv('dataset_output.csv')
ca2_analiza
setwd("C:/Users/Ana/Documents/GitHub/assignments/CA2/data_out")
ca2_analiza <- read.csv('dataset_output.csv')
setwd("C:/Users/Ana/Documents/GitHub/assignments/CA2/data_out")
ca2_analiza <- read.csv('dataset_output.csv')
average_number_of_changes = mean(ca2_analiza$changes)
average_number_of_comment = mean(ca2_analiza$comment_lines)
commits_per_developer <- ca2_analiza %>% group_by(name) %>% tally()
average_number_of_changes
average_number_of_comment
ca2_analiza$comment_lines
ca2_analiza
str(ca2_analiza)
average_number_of_comment = mean(ca2_analiza$number.of.lines)
average_number_of_comment
name<-(ca2_analiza$name)
revision<-(ca2_analiza$revision)
ggplot(ca2_analiza, aes(x='name', y='revision')) + geom_bar(stat="Identity") +
labs(x="name", y="revision")
ggplot(ca2_analiza, aes(x=name, y=revision)) + geom_bar(stat="Identity") +
labs(x="name", y="revision")
ca2_analiza$name
ca2_analiza$name[ca2_analiza$name='/OU=Domain Control Validated/CN=svn.company.net'] = 'Domain'
ca2_analiza$name[ca2_analiza$name == '/OU=Domain Control Validated/CN=svn.company.net'] = 'Domain'
ca2_analiza$name[name == '/OU=Domain Control Validated/CN=svn.company.net'] = 'Domain'
ca2_analiza <- read.csv('dataset_output.csv', stringsAsFactors = F)
str(ca2_analiza)
average_number_of_changes = mean(ca2_analiza$changes)
average_number_of_comment = mean(ca2_analiza$number.of.lines)
commits_per_developer <- ca2_analiza %>% group_by(name) %>% tally()
average_number_of_changes
average_number_of_comment
ca2_analiza$name[name == '/OU=Domain Control Validated/CN=svn.company.net'] = 'Domain'
name<-(ca2_analiza$name)
revision<-(ca2_analiza$revision)
ggplot(ca2_analiza, aes(x=name, y=revision)) + geom_bar(stat="Identity") +
labs(x="name", y="revision")
ggplot(ca2_analiza, aes(x=name, y=revision)) + geom_bar(stat="Identity") +
labs(x="name", y="revision") +
theme(axis.text.x = element_text(angle = 90))
ggplot(ca2_analiza, aes(x=name, y=revision)) + geom_bar(stat="Identity") +
labs(x="name", y="revision") +
theme(axis.text.x = element_text(angle = 90)) +
theme(axis.text.y = element_blank())
